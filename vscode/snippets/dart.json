{
	"header": {
		"prefix": "head",
		"body": [
			"/*",
			" * @author Oleg Khalidov <brooth@gmail.com>.",
			" * -----------------------------------------------",
			" * Freelance Software Development:",
			" * Upwork: https://www.upwork.com/fl/khalidovoleg",
			" */",
			""
		]
	},
	"view model": {
		"prefix": "view model",
		"body": [
			"class _ViewModel {",
			"  final AppState _state;",
			"  final Function _dispatch;",
			"  ",
			"  _ViewModel(Store<AppState> store)",
			"    : _state = store.state,",
			"      _dispatch = store.dispatch;",
			"  ",
			"  operator ==(o) {",
			"    return o is _ViewModel;",
			"  }",
			"  ",
			"  @override",
			"  int get hashCode => 0;",
			"}"
		]
	},
	"has method": {
		"prefix": "has method",
		"body": [
			"bool get has$2$3 {",
			"  final prev = _state.prevState?.$1State?.$2State;",
			"  return prev != _state.$1State.$2State &&",
			"    _state.$1State.$2State.is$3;",
			"}"
		]
	},
	"model action": {
		"prefix": "model action",
		"body": [
			"void $1() {",
			"  _dispatch(new $1());",
			"}"
		]
	},
	"async action": {
		"prefix": "async action",
		"body": [
			"class $1StateChanged {",
			"  final AsyncState<$2> state;",
			"",
			"  $1StateChanged(this.state);",
			"",
			"  @override",
			"  String toString() =>",
			"      '$runtimeType.' +",
			"      '${state.status}'.substring('.${state.status.runtimeType}'.length);",
			"}",
			"",
			"class $1 implements AsyncAction {",
			"  $3",
			"  @override",
			"  ThunkAction<AppState> execute(api) => (store) async {",
			"        print('$1Action.execute()');",
			"",
			"        final session = store.state.authState.signInState.value;",
			"        if (session == null) return;",
			"",
			"        store.dispatch($1StateChanged(AsyncState.inProgress()));",
			"        try {",
			"          final $6 = await api.$4($5);",
			"          store.dispatch($1StateChanged(AsyncState.success($6)));",
			"        } catch (error) {",
			"          store.dispatch($1StateChanged(AsyncState.failed(error)));",
			"        }",
			"      };",
			"}"
		]
	},
	"widget mixin": {
		"prefix": "widget mixin",
		"body": "with WidgetStateUtilsMixin"
	},
	"set state": {
		"prefix": "ss",
		"body": "setState(() => $0);"
	},
	"navigate": {
		"prefix": "navigate",
		"body": [
			"Navigator.push(context, AppRouteTransitions",
			"   .standard((_) => $1(ctx$0)))"
		]
	}
}