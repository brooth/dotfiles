{
    "reducer": {
        "prefix": "_reducer",
        "body": [
            "//import { ActionState } from '.';",
            "//import actions from '../actions';",
            "//import {  } from '../entities';",
            "",
            "",
            "export interface State {",
            "}",
            "const initialState: State = {",
            "}",
            "",
            "const handlers: { [key: string]: (state: State, payload: any) => State } = {};",
            "",
            "export default function profileReducer(state: State = initialState, action: any): State {",
            "    const handler = handlers[action.type];",
            "    if (handler)",
            "        return handler(state, action.payload);",
            "    return state;",
            "}"
        ]
    },
    "reducer handler": {
        "prefix": "_reducer-handler",
        "body": [
            "handlers[actions.${1}.TYPE] =",
            "    (state: State, payload: actions.${1}.Payload): State => {",
            "        return {",
            "            ...state,${0}",
            "        };",
            "    };"
        ]
    },
    "action declaration": {
        "prefix": "_action-scheme",
        "body": [
            "export namespace ${1} {",
            "    export const TYPE = '${2}__${1}';",
            "    export type  Payload = ${3:null};",
            "}"
        ]
    },
    "async actions declaration": {
        "prefix": "_async-actions-scheme",
        "body": [
            "export namespace ${1} {",
            "    export const TYPE = '${2}__${1}';",
            "    export type Payload = ${3:null};",
            "}",
            "export namespace ${1}__in_progress {",
            "    export const TYPE = '${2}__${1}__in_progress';",
            "    export type Payload = null;",
            "}",
            "export namespace ${1}__complete {",
            "    export const TYPE = '${2}__${1}__complete';",
            "    export type Payload = CompletePayload & {${0}};",
            "}"
        ]
    },
    "async action": {
        "prefix": "_firebase-action",
        "body": [
            "import { Action as ReduxAction } from 'redux';",
            "import { put } from 'redux-saga/effects';",
            "import * as firebase from 'firebase';",
            "",
            "import actions from '..';",
            "import C from '../../c';",
            "",
            "type Action = ReduxAction & {payload: actions.${1}.Payload};",
            "export default function* execute(action: Action ): Generator {",
            "    yield put({ type: actions.${1}__in_progress.TYPE });",
            "",
            "    const result: actions.${1}__complete.Payload =",
            "        yield firebase.${2}",
            "            .then((result: any): actions.${1}__complete.Payload => {",
            "                return {",
            "                    status: C.STATUSES.OK,${0}",
            "                }",
            "            })",
            "            .catch((error: any): actions.${1}__complete.Payload => {",
            "                return {",
            "                    status: error.code == 'auth/network-request-failed' ?",
            "                        C.STATUSES.NETWORK_PROBLEMS : C.STATUSES.SERVER_ERROR,",
            "                }",
            "            });",
            "",
            "    yield put({ type: actions.${1}__complete.TYPE, payload: result });",
            "}"
        ]
    }
}